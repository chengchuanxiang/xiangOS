#ifndef GLOBAL_H
#define GLOBAL_H
#include "../lib/stdint.h"

#define RPL0 0
#define RPL1 1
#define RPL2 2
#define RPL3 3

#define TI_GDT 0
#define TI_LDT 1

#define SELECTOR_K_CODE		((1 << 3) + (TI_GDT << 2) + RPL0)
#define SELECTOR_K_DATA		((2 << 3) + (TI_GDT << 2) + RPL0)
#define SELECTOR_K_STACK	SELECTOR_K_DATA
#define SELECTOR_K_GS		((3 << 3) + (TI_GDT << 2) + RPL0)

//--------------    IDT    --------------
//中断描述符表是保护模式下用于存储中断处理程序的入口的表，
//当cpu接受一个中段时，需要用中断向量在此表中检索对应的描述符
//在该描述符中找到中断处理程序的起始地址，然后执行中断处理程序
//
//段描述符描述的是一片内存区域，门描述符中描述的是一段代码
//中断描述符表中的每个描述符用8字节描述
//
//------------      中段门描述符      -------------
//31                 16  15   14    13    12   11   8   7  6  5  4   0
//---------------------------------------------------------------------
//|中断处理程序在目标段| P  |  DPL    |  S  | TYPE   | 0 |0| 0 |未使用|
//|内的偏移量的31~16位 |    |         |  0  |D|1|1|0 |   | |   |      |
//---------------------------------------------------------------------
//                      高32位
//
//31			     16     15    									  0
//----------------------------------------------------------------------
//|中断处理程序目标代码段 | 中断处理程序在目标代码段内的偏移量的15～0位| 
//|描述符选择子           |                                            |
//----------------------------------------------------------------------
//					    低32位         
//	D = 0 表示16位模式     D = 1 表示32位模式 
//	P = 0 门描述符中的中断处理程序不在内存中
//中断门包含了中断处理程序所在段的段选择子和段内偏移地址。当通过此方式进入中断后
//标准寄存器eflags中的IF位（中断标志位）自动置0，也就是进入中断后，自动把中断关闭
//，避免中断嵌套。Linux就是理由中断门实现的系统调用，就是那个著名的int 0x80.
//中断门只允许存在于IDT中（中断描述符表中）。描述符中中断门的type值为1110


//---------------------    中断描述符表寄存器IDTR     ----------------
//47					16  15					0
//-----------------------------------------------
//|    32位的表基址       |      16位的表界限   |
//-----------------------------------------------
//加载IDT指令
//lidt 48位内存数据			前16位是IDT表界限 后32位是IDT线性基地址
//


//--------------------     IDT描述符号属      ------------------
#define 	IDT_DESC_P	1
#define		IDT_DESC_DPL0	0
#define		IDT_DESC_DPL3	3
#define		IDT_DESC_32_TYPE	0xE
#define		IDT_DESC_16_TYPE	0x6

#define		IDT_DESC_ATTR_DPL0		((IDT_DESC_P << 7) + (IDT_DESC_DPL0 << 5) + IDT_DESC_32_TYPE)
#define		IDT_DESC_ATTR_DPL3		((IDT_DESC_P << 7) + (IDT_DESC_DPL3 << 5) + IDT_DESC_32_TYPE)

#endif

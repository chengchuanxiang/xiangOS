;------------- loader和kernel ---------------
LOADER_BASE_ADDR equ 0x900
LOADER_STACK_TOP equ LOADER_BASE_ADDR
LOADER_START_SECTOR equ 0x2

KERNEL_BIN_BASE_ADDR equ 0x70000
KERNEL_START_SECTOR equ 0x9
KERNEL_ENTRY_POINT equ 0xc0001500

;--------------     gdt     -----------------

;-------------------    段描述符格式   ------------------------------
;                 段描述符是用来描述一个内存段的
; 31~24    23   22   21   20    19~16  15  14~13  12  11~8  7~0
;--------------------------------------------------------------------  高
;|段基址 | G | D/B | L | AVL | 段界限 | P | DPL | S | TYPE | 段基址 |  32
;|31~24位|   |     |   |     | 19~16位|   |     |   |      | 23~16位|  位
;--------------------------------------------------------------------
;            31~16                              15~0
;--------------------------------------------------------------------  第
;|	         段基址15~0             |        段界限15~0位           |  32
;--------------------------------------------------------------------  位

;-----------------------    段界限 段基址  ----------------------------
;32位保护模式下，段基址为32位     段界限表示段边界的扩展最值,即最大扩展到多少或最小扩展到多少						
;                                 段界限表示段的边界，大小，范围。        ___
;				高地址			  |	  |						             |   |
;                                 |   |                                  |   |
;				低地址		      |___|                                  |   |
;					    数据段和代码段向高地址扩展                    栈段向低地址扩展
;                     此时段界限表示段内偏移的最大值              此时段界限表示段内偏移的最小值   


;								 段界限是个单位值，单位要么是1字节(G=0)，要么是4KB(G=1)，由G位表示
;							     段的大小为段界限值（20位）* 单位 故段的大小要么是1MB，要么是4GB
;							     若段内偏移地址在段界限之外，cpu会抛异常(硬件处理)
;-----------------------    S   TYPE      -----------------------------
;             S=0 表示系统段   S=1 表示非系统段
;                    TYPE               TYPE
;             LDT    0010      代码段   100* 只执行代码段              *位（A位）：每当该段被CPU访问过后，CPU将此位置1
;									    101* 可执行，可读                          创建一个新描述符时，应该将此位置0
;									    110* 可执行，一致性
;                                       111* 可执行，可读，一致性
;
;             中断门 1110      数据段   000* 只读数据段  
;             陷阱门 1111               001* 可读写数据段
;                                       010* 只读向下扩展的数据段
                                        011* 可读写，向下扩展的数据段
;-----------------------   DPL   ---------------------------
;                      描述符特权级

;----------------------    P     ---------------------------
;            	present位,段在内存中p为1，否则p为0

;---------------------    AVL    --------------------------
;					Available 可用的。操作系统是否可以随意用此位

;--------------------     L      --------------------------
;					L=1 表示64位代码段 L=0 表示32位代码段
;--------------------    D/B     --------------------------
;          对于代码段来说，D=0，表示指令中有效地址和操作数是16位，有效地址用ip寄存器
;						   D=1       ...                    32位, 有效地址用eip寄存器
;		   对于栈段来说，  B=0, 使用sp寄存器， B=1, 使用esp寄存器


;--------------------   GDTR寄存器 ------------------------
;        47                  15                  0
;        -----------------------------------------
;		 |   GDT内存真实地址 |   GDT界限         |
;        -----------------------------------------

;--------------------   选择子结构 ------------------------
;        15                 3       2      0
;        -----------------------------------
;		 |    描述符索引值  |  TI   | RPL  |
;        -----------------------------------
;        
;        TI:TI=0 GDT中索引描述符 TI=1  LDT中索引描述符
;		 RPL请求特权级

;------------------     gdt描述符属性    -------------------
DESC_G_4K 	equ 	1_00000000000000000000000b
DESC_D_32 	equ  	 1_0000000000000000000000b
DESC_L    	equ   	  1_000000000000000000000b
DESC_AVL  	equ    	   0_00000000000000000000b
DESC_LIMIT_CODE2   equ  1111_0000000000000000b   ;高32位的段界限值
DESC_LIMIT_DATA2   equ  DESC_LIMIT_CODE2
DESC_LIMIT_VIDEO2  equ  0000_0000000000000000b
DESC_P      equ			    1_000000000000000b
DESC_DPL_0  equ				 00_0000000000000b
DESC_DPL_1  equ              01_0000000000000b
DESC_DPL_2  equ				 10_0000000000000b
DESC_DPL_3  equ              11_0000000000000b
DESC_S_CODE equ                1_000000000000b
DESC_S_DATA equ    DESC_S_CODE
DESC_S_sys  equ                0_000000000000b
DESC_TYPE_CODE equ              1000_00000000b
DESC_TYPE_DATA equ              0010_00000000b

DESC_CODE_HIGH4 equ (0x00 << 24) + DESC_G_4K + DESC_D_32 + DESC_L + DESC_AVL + DESC_LIMIT_CODE2 + DESC_P + DESC_DPL_0 + DESC_S_CODE + DESC_TYPE_CODE + 0x00
DESC_DATA_HIGH4 equ (0x00 << 24) + DESC_G_4K + DESC_D_32 + DESC_L + DESC_AVL + DESC_LIMIT_DATA2 + DESC_P + DESC_DPL_0 + DESC_S_DATA + DESC_TYPE_CODE + 0x00
DESC_VIDEO_HIGH4 equ (0x00 << 24) + DESC_G_4k + DESC_D_32 + DESC_L + DESC_AVL + DESC_LIMIT_VIDEO2 + DESC_P + DESC_DPL_0 + DESC_S_DATA + DESC_TYPE_DATA + 0x0b ;0xb800 显存文本模式的起始地址
;-------------------    选择子属性     ----------------------
RPL0	equ   00b
RPL1	equ	  01b
RPL2	equ	  10b
RPL3	equ   11b
TI_GDT  equ   000b
TI_LDT  equ   100b


;------------------     页目录项及页表项      -------------------
;
;						页目录项
;
; 31            12   11    9   8   7    6   5   4   3   2   1   0
;-----------------------------------------------------------------
;|页表物理页地址   |  AVL    | G | 0  | D | A |PCD|PWT| US| RW| P|        
;-----------------------------------------------------------------
;
;						页表项
;31             12   11    9   8   7    6   5   4   3   2   1  0
;-----------------------------------------------------------------
;|物理页地址       | AVL    | G | PAT | D | A |PCD|PWT| US| RW| P|
;-----------------------------------------------------------------
;p=1    该页存在于物理内存中         p=0  该页不存在于物理内存中
;操作系统的页式虚拟内存管理就是通过P位和相应的pagefault异常来实现的
;RW     读写位  1为可读可写， 0表示可读不可写
;US     1为user普通用户位，特权级0,1,2,3都可以访问 0为Supervisor超级用户位，特权级3不可访问，0,1,2可以
;PWT    1表示该页为高速缓存，0为普通内存
;PCD    1该页启用高速缓存，0表示禁止将该页缓存
;A		1表示该页被内存访问过 和段描述符的p位可以一起实现段式虚拟内存访问，操作系统定期将A位清0，统计一段时间内变成1的次数(LRU?)
;D		当cpu对一个页面执行写操作时，就会设置对应页表项的D位为1
;PAT	页属性表位，能够在页面一级的粒度上设置内存属性。比较复杂，这里置0
;G		Global全局位 为1表示是全局页，在高速缓存TLB中一直保存，给出虚拟地址就出物理地址，无那3部分转换
;AVL	available位，操作系统可用该位，cpu不会理会。此处置0即可


;----------------       页表配置      ---------------------------
PAGE_DIR_TABLE_POS equ 0x100000  ;物理内存地址1MB处

;----------------       页表相关属性  ---------------------------
PG_P 		equ 	  1b
PG_RW_R     equ      00b
PG_RW_W     equ      10b
PG_US_S     equ     000b
PG_US_U     equ     100b

